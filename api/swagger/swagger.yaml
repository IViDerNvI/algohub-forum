openapi: 3.0.3
info:
  title: algohub api
  description: algohub backend api 
  contact:
    email: ividernvi@outlook.com
  license:
    name: MIT
    url: https://mit-license.org/
  version: 0.1.0
servers:
  - url: https://localhost:8089/v1
tags:
  - name: user
    description: Operations about user
paths:
  /login:
    post:
      tags:
        - log
      summary: Log in user
      description: test
      operationId: loginUser
      security:
        - basicAuth: []
      responses:
        '200':
          description: login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
  /logout:
    post:
      tags:
        - log
      summary: Log out user
      description: Logs out the user and invalidates the session.
      operationId: logoutUser
      security:
        - basicAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegiste'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'          
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: update successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
        '500':
          description: databse save failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the admin.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
  /user/{username}/likes:
    get:
      tags:
        - user
        - like
      summary: Get likes
      description: This only can be done by logged in user.
      operationId: getUserLike
      parameters:
        - name: username
          in: path
          description: username that need to be verified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Likelist'
  /user/{username}/likes/{itemid}:
    delete:
      tags:
        - user
        - like
      summary: delete like by itemid
      description: This only can be done by logged in user.
      operationId: deleteUserLike
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: itemid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
  /posts:
    post:
      tags:
        - post
      summary: Create post 
      description: This can only be done by the logged in user.
      operationId: createPost
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Create successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Create failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
  /posts/{postid}:
    get:
      tags:
        - post
      summary: Get post
      description: This can be done by any user.
      operationId: getPost
      parameters:
        - name: postid
          in: path
          description: id that need to be got
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
        - post
      summary: Update post
      description: This can only be done by the logged in user.
      operationId: updatePost
      parameters:
        - name: postid
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Create successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      tags: 
        - post
      summary: Delete post
      description: This can only be done by the logged in user.
      operationId: deletePost
      parameters:
        - name: postid
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'  
        '404':
          description: Cannot find post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'  
  /posts/{postid}/likes:
    post:
      tags:
        - like
        - post
      summary: Create like for a post
      description: This can only be done by the logged in user. backend will check jwt token to decide who create it.
      operationId: createPostLike
      parameters:
        - name: postid
          in: path
          required: true
          description: post id that need to be liked
          schema:
            type: string
      responses:
        '200':
          description: like post successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
    delete:
      tags:
        - like
        - post
      summary: Delete like for a post
      description: This can only be done by the logged in user. backend will check jwt token to decide who delete it.
      operationId: deletePostLike
      parameters:
        - name: postid
          in: path
          required: true
          description: post id that need to be delete
          schema:
            type: string
      responses:
        '200':
          description: like post successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
    get:
      tags:
        - like
        - post
      summary: Get like which is user commit
      description: This can only be done by the logged in user. 
      operationId: getUserPostLike
      parameters:
        - name: postid
          in: path
          required: true
          description: post id that need to be delete
          schema:
            type: string
      responses:
        '200':
          description: like post successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCode'
        
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Post:
      type: object
      properties:
        title:
          type: string
          example: "POST TITLE"
        content:
          type: string
          example: "post content"
        userid:
          type: string
          example: "user-f72731e1-61bf-4496-a618-f25393d427db"
    OK:
      type: string
      example: OK
    Likelist:
      type: object
      properties:
        total_count:
          type: integer
          format: int64
          example: 1023
    ErrCode:
      type: object
      properties:
        errcode:
          type: integer
          format: int64
          example: 000000
        httpstatus:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          example: "OK"
        refer:
          type: string
          example: "ok"
    UserRegiste:
      type: object
      properties:
        username:
          type: string
          example: john
        password:
          type: string
          example: '12345'
        email:
          type: string
          example: john@email.com
    User:
      type: object
      properties:
        instanceID:
          type: string
          example: user-df0b62cc-ebb3-435a-866b-52258ecb8db1
        name: 
          type: string
          example: john@857
        createdAt:
          type: string
          example: 2024-11-25T12:04:40.346+08:00
        updatedAt:
          type: string
          example: 2024-11-25T12:04:40.346+08:00
        deletedAt:
          type: string
          example: null
        username:
          type: string
          example: john
        password:
          type: string
          example: '12345'
        email:
          type: string
          example: john@email.com
        status:
          type: integer
          description: User Status
          format: int32
          example: 1